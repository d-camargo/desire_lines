# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DesireLinesDialog
                                 A QGIS plugin
 OD desire lines
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Diego Camargo
        email                : dg.camargo@proton.me
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import desirelines, re
import subprocess, sys, shutil, platform
from importlib import reload
from qgis import processing

from qgis.PyQt import uic, QtWidgets
from qgis.core import QgsProject, QgsVectorLayer, QgsFields, QgsField, QgsCoordinateReferenceSystem, \
    QgsVectorFileWriter, QgsWkbTypes, QgsCoordinateTransformContext, QgsApplication, Qgis, QgsMessageLog, \
    QgsGeometry, QgsProviderRegistry
from qgis.PyQt.QtCore import QVariant
from qgis.gui import QgsMessageBar
from qgis.utils import plugins, iface


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'desirelines_dialog_base.ui'))


class DesireLinesDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DesireLinesDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.readCSV.clicked.connect(self.matrix)
        self.readV.clicked.connect(self.fvector)
        self.addCentroids.clicked.connect(self.centroids)
        self.mMapLayerComboBox.layerChanged.connect(self.map_changed)
        self.mMapLayerComboBox_2.layerChanged.connect(self.map_changed)
        self.mFieldComboBox.fieldChanged.connect(self.field_select)
        self.mFieldComboBox_2.fieldChanged.connect(self.field_select_2)
        self.mFieldComboBox_3.fieldChanged.connect(self.field_select_3)
        self.makeDL.clicked.connect(self.desirelines)


    def matrix(self):
        matrix_path = self.matrixInsert.filePath()
        mph = os.path.dirname(matrix_path)
        if mph == os.chdir(mph):
            pass
        else:
            os.chdir(mph)
        #Load CSV File
        enc = 'windows-1252'
        uri = "file:///"+matrix_path+"?encoding={}&type=csv&delimiter={}&geomType=none".format(enc,";")
        file = os.path.basename(matrix_path)

        output_cent = os.getcwd()+r'\output.gpkg'
        matrix = QgsVectorLayer(uri, 'matrix', 'delimitedtext')
        QgsVectorFileWriter.writeAsVectorFormatV3(
            layer=matrix,
            fileName=output_cent,
            transformContext=QgsCoordinateTransformContext(),
            options=QgsVectorFileWriter.SaveVectorOptions())
        add_table = output_cent + '|layername={}'.format('output')
        iface.addVectorLayer(add_table, 'matrix', 'ogr')


    def fvector(self):
        vector_path = self.vectorInsert.filePath()
        print(vector_path)
        vph = os.path.dirname(vector_path)
        layer = iface.addVectorLayer(vector_path, "traffic_zones", "ogr")
        if not layer:
            print
            "Layer failed to load!"

    def centroids(self):
        output_cent = os.getcwd()+r'\output.gpkg'
        file_name = 'ogr:dbname=\''+output_cent+'\' table="centroids" (geom)'
        traffic_select = QgsProject.instance().mapLayersByName('traffic_zones')
        input_traffic = traffic_select[0].dataProvider().dataSourceUri()
        print(input_traffic)
        processing.run("native:centroids",
                       {'INPUT': input_traffic, 'ALL_PARTS': True,
                        'OUTPUT': file_name})
        add_table = output_cent+'|layername={}'.format('centroids')
        iface.addVectorLayer(add_table, 'centroids', 'ogr')

    def map_changed(self):
        layer = self.mMapLayerComboBox.currentLayer()
        self.mFieldComboBox.setLayer(layer)
        self.mFieldComboBox_2.setLayer(layer)
        self.mFieldComboBox_3.setLayer(layer)
        field = self.mFieldComboBox.currentField()
        field2 = self.mFieldComboBox_2.currentField()
        field3 = self.mFieldComboBox_3.currentField()
        self.mFieldComboBox.setField(field)
        self.mFieldComboBox_2.setField(field2)
        self.mFieldComboBox_3.setField(field3)

        layer1 = self.mMapLayerComboBox_2.currentLayer()
        self.mFieldComboBox_4.setLayer(layer1)
        field4 = self.mFieldComboBox_4.currentField()
        self.mFieldComboBox_4.setField(field4)

    def field_select(self):
        layer = self.mMapLayerComboBox.currentLayer()
        self.mFieldComboBox.setLayer(layer)
        field = self.mFieldComboBox.currentField()
        self.mFieldComboBox.setField(field)

    def field_select_2(self):
        layer = self.mMapLayerComboBox.currentLayer()
        self.mFieldComboBox_2.setLayer(layer)
        field2 = self.mFieldComboBox_2.currentField()
        self.mFieldComboBox_2.setField(field2)

    def field_select_3(self):
        layer = self.mMapLayerComboBox.currentLayer()
        self.mFieldComboBox_3.setLayer(layer)
        field3 = self.mFieldComboBox_3.currentField()
        self.mFieldComboBox_3.setField(field3)


    def desirelines(self):
        matr = self.mMapLayerComboBox.currentText()
        cent = self.mMapLayerComboBox_2.currentText()
        field = self.mFieldComboBox.currentField()
        field2 = self.mFieldComboBox_2.currentField()
        field3 = self.mFieldComboBox_3.currentField()
        field4 = self.mFieldComboBox_4.currentField()
        output_cent = os.getcwd() + r'\output.gpkg'
        centroids_select = QgsProject.instance().mapLayersByName('centroids')
        input_centroids = centroids_select[0].dataProvider().dataSourceUri()

        sql_query = f"SELECT {field}, {field2}, {field3}, make_line(a.geometry, b.geometry) FROM {matr} JOIN {cent} a ON {matr}.{field} = a.{field4} JOIN {cent} b ON {matr}.{field2} =  b.{field4} WHERE a.{field4} != b.{field4}"
        file_name = 'ogr:dbname=\'' + output_cent + '\' table="Desire_Lines" (geom)'
        processing.run("qgis:executesql", {'INPUT_DATASOURCES': [
            input_centroids],
            'INPUT_QUERY': sql_query,
            'INPUT_UID_FIELD': '', 'INPUT_GEOMETRY_FIELD': '', 'INPUT_GEOMETRY_TYPE': 0,
            'INPUT_GEOMETRY_CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
            'OUTPUT': file_name})
        add_table = output_cent + '|layername={}'.format('Desire_Lines')
        iface.addVectorLayer(add_table, 'Desire_Lines', 'ogr')
        #vlayer = QgsVectorLayer(f"?query={sql_query}", "Desire_Line", "virtual")
        #crs = QgsProject.instance().crs().authid()
        #vlayer.setCrs(QgsCoordinateReferenceSystem(crs.split(":")[1]))
        #print(crs.split(":")[1])

        #pass